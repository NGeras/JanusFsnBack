@page "/screens"
@using Microsoft.AspNetCore.SignalR
@using Janus.Domain.Entites
@using JanusWeb.Data
@using Janus.Domain
@inject ScreenService ScreenService
@inject AdSlotService SlotService
@inject NavigationManager NavigationManager
@inject IHubContext<SocketHub> SocketContext
@inject VideoMergerService VideoMergerService
<h1>Screens</h1>
<p>Blazor CRUD operation</p>
<div class="row">
    <div class="col-md-6">
        <button class="btn btn-primary" @onclick="SendToAll">
            To all
        </button>
    </div>
    <div class="col-md-6">
        <p>@SearchString</p>
    </div>
</div>
<br/>
@if (screenList == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
        <tr>
            <th>ID</th>
            <th>AppID</th>
            <th>Location</th>
            <th>Category</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var screenObj in screenList)
        {
            <tr>
                <td>@screenObj.Id</td>
                <td>@screenObj.ScreenAppId</td>
                <td>@screenObj.Location</td>
                <td>@screenObj.Category</td>
                <td>
                    <a href='/screen/edit/@screenObj.Id' class="btn btn-outline-dark" role="button">
                        Edit
                    </a>
                    <a href='/screen/slots/@screenObj.Id' class="btn btn-outline-info" role="button">
                        Slots
                    </a>
                    <button class="btn btn-outline-danger" @onclick="() => DeleteScreen(screenObj)">
                        Delete
                    </button>
                    <button class="btn btn-outline-danger" @onclick="() => ClearSlots(screenObj)">
                        ClearSlots
                    </button>
                    <button class="btn btn-outline-primary" @onclick="() => SendToScreen(screenObj)">
                        To screen
                    </button>
                </td>
            </tr>
        }
        </tbody>

    </table>
}

@code {
    protected List<Screen> screenList = new();
    protected Screen screen = new();
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetScreen();
    }

    protected async Task GetScreen()
    {
        screenList = await ScreenService.GetScreens();
    }

    private async Task SendToScreen(Screen screenObj)
    {
        var slot = await SlotService.GetAdSlotForScreen(screenObj.Id);
        var videoFilePath = Path.Combine(Directory.GetCurrentDirectory(), $"MyStaticFiles\\{screenObj.ScreenAppId}.mp4");
        if (File.Exists(videoFilePath))
        {
            File.Delete(videoFilePath);
        }
        await VideoMergerService.MergeAdsToSingleFile(new[] { slot.Slot1, slot.Slot2, slot.Slot3, slot.Slot4, slot.Slot5, slot.Slot6 },
            videoFilePath);
        var videoUri = new Uri(new Uri(NavigationManager.BaseUri), $"StaticFiles/{Path.GetFileName(videoFilePath)}");
        await TriggerDownloadForScreen(screenObj, videoUri);
    }

    public async Task TriggerDownloadForScreen(Screen screen, Uri videoUri)
    {
        var updatedScreen = await ScreenService.GetScreen(screen.Id);
        SearchString = updatedScreen.ConnectionId;
        StateHasChanged();
        await SocketContext.Clients.Client(updatedScreen.ConnectionId).SendAsync(Enums.HubMethodNames.ReceiveMessage.ToString(),
            Enums.HubMessageType.TriggerVideoDownload, videoUri);
        await Task.Delay(3000);
        SearchString = string.Empty;
    }

    private async Task SendToAll()
    {
        var videoUri = new Uri(new Uri(NavigationManager.BaseUri), "StaticFiles/video.mp4");
        await SocketContext.Clients.All.SendAsync(Enums.HubMethodNames.ReceiveMessage.ToString(),
            Enums.HubMessageType.TriggerVideoDownload, videoUri);
    }

    private async Task DeleteScreen(Screen screenObj)
    {
        await ScreenService.DeleteScreen(screenObj);
        screenList.Remove(screenObj);
        StateHasChanged();
    }

    private async Task ClearSlots(Screen screenObj)
    {
        await SlotService.DeleteSlot(screenObj);
    }

}