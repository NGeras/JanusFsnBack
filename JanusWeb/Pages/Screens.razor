@page "/screens"
@using Janus.Domain.Entites
@using JanusWeb.Data
@using Microsoft.AspNetCore.SignalR
@using Janus.Domain
@inject ScreenService ScreenService
@inject NavigationManager NavigationManager
@inject IHubContext<SocketHub> SocketContext
@inject VideoMergerService VideoMergerService
<h1>Screens</h1>
<p>Blazor CRUD operation</p>
<div class="row">
    <div class="col-md-6">
        <button class="btn btn-primary" @onclick=SendToAll>
            To all
        </button>
    </div>
</div>
<br />@if (screenList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>ID</th>
                <th>AppID</th>
                <th>Location</th>
                <th>Category</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var screenObj in screenList)
            {
                <tr>
                    <td>@screenObj.Id</td>
                    <td>@screenObj.ScreenAppId</td>
                    <td>@screenObj.Location</td>
                    <td>@screenObj.Category</td>
                    <td>
                        <a href='/screen/edit/@screenObj.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/screen/slots/@screenObj.Id' class="btn btn-outline-info" role="button">
                            Slots
                        </a>
                        <a href='/screen/delete/@screenObj.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                        <button class="btn btn-outline-primary" @onclick="() => SendToScreen(screenObj)">
                            To screen
                        </button>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
@code {
    protected List<Screen> screenList = new();
    protected Screen screen = new();
    protected string SearchString { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await GetScreen();
    }
    protected async Task GetScreen()
    {
        screenList = await ScreenService.GetScreens();
    }
    protected void DeleteConfirm(int screenId)
    {
        screen = screenList.FirstOrDefault(x => x.Id == screenId);
    }

    private async Task SendToScreen(Screen screenObj)
    {
        Uri videoUri = new Uri(new Uri(NavigationManager.BaseUri), "StaticFiles/video.mp4");
        await TriggerDownloadForScreen(screenObj, videoUri);
    }

    public async Task TriggerDownloadForScreen(Screen screen, Uri videoUri)
    {
        var updatedScreen = await ScreenService.GetScreen(screen.Id);
        await SocketContext.Clients.Client(updatedScreen.ConnectionId).SendAsync(Enums.HubMethodNames.ReceiveMessage.ToString(),
            Enums.HubMessageType.TriggerVideoDownload, videoUri);
    }

    private async Task SendToAll()
    {
        Uri videoUri = new Uri(new Uri(NavigationManager.BaseUri), "StaticFiles/video.mp4");
        await SocketContext.Clients.All.SendAsync(Enums.HubMethodNames.ReceiveMessage.ToString(),
            Enums.HubMessageType.TriggerVideoDownload, videoUri);
    }

}

